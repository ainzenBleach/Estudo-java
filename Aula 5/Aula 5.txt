- Laço de repetição (for, while, do while)

A utilização de cada estilo de repetição fica de acordo com a situação.

 - For: Quando você sabe quantas vezes vai repetir
 - While: Quando não sabe quantas vezes, e depende de uma condição
 - Do while: Igual ao while, mas garante pelo menos uma execução

- For: Mesmo estilo no JavaScript

ex(sintaxe):

    for (início; condição; incremento) {
        // código repetido
    }

ex(Estrutura no codigo):

    public class ExemploFor {
        public static void main(String[] args) {
            for (int i = 1; i <= 10; i++) {
                System.out.println("Número: " + i);
            }
        }
    }

_______________________________________________________________________________________________________________

- While: Mesma estrutura do JavaScript, porem na comparação de strings usamos o .equals para fazer a 
comparação.

ex(sintaxe):

    while (condição) {
        // código repetido enquanto for verdadeiro
    }

ex(Estrutura no codigo):

    public class ExemploWhile {
        public static void main(String[] args) {
            Scanner input = new Scanner(System.in);
            String senha = "";

            while (!senha.equals("1234")) {
                System.out.print("Digite a senha: ");
                senha = input.nextLine();

                if (!senha.equals("1234")) {
                    System.out.println("Senha incorreta");
                }
            }

            System.out.println("Acesso liberado");
            input.close();
        }
    }

_______________________________________________________________________________________________________________

-DO while: Estrutra do while mas executando pelo menos uma vez

ex(sintaxe):

    do {
        // código
    } while (condição);

ex(Estrutura no codigo):

    import java.util.Scanner;
    import java.util.Random;

    public class MenuDoWhile {
        public static void main(String[] args) {
            Scanner input = new Scanner(System.in);
            Random aleatorio = new Random();
            int opcao;

            do {
                System.out.println("\n--- MENU ---");
                System.out.println("1 - Dizer Olá");
                System.out.println("2 - Mostrar número aleatório");
                System.out.println("0 - Sair");
                System.out.print("Escolha: ");
                opcao = input.nextInt();

                switch (opcao) {
                    case 1:
                        System.out.println("Olá!");
                        break;
                    case 2:
                        int numero = aleatorio.nextInt(100); // número de 0 a 99
                        System.out.println("Número sorteado: " + numero);
                        break;
                    case 0:
                        System.out.println("Saindo do menu...");
                        break;
                    default:
                        System.out.println("Opção inválida");
                }

            } while (opcao != 0);

            input.close();
        }
    }

_______________________________________________________________________________________________________________

Importando a função Random:

Faz a importação da função:
    import java.util.Random;

Criar um objeto, igual no scanner:
    Random aleatorio = new Random();

Utilizar os comandos para gerar os numeros:
    - NextInt(): Gera um número inteiro aleatório (pode ser negativo)
    - NextInt(n): Gera um número entre 0 e n - 1
    - NextDouble(): Gera um número decimal entre 0.0 e 1.0
    - NextBoolean(): Gera true ou false aleatoriamente

